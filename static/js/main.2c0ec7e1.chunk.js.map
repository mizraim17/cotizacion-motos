{"version":3,"sources":["Component/Rowz.js","App.js","serviceWorker.js","index.js"],"names":["Rowz","props","react_default","a","createElement","key","moto","index","console","log","className","Modelo","Cilindraje","type","Precio","Frenos","Peso","Largo","src","Urlimage","width","alt","href","Url","App","state","Bdmotos","allMotos","this","lib","responsive","data-field","map","el","i","Component_Rowz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mxFAqBeA,SAnBD,SAACC,GACb,OAEEC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAMK,KAAKC,OAEjBC,QAAQC,IAAIR,EAAMK,MACnBJ,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAeT,EAAMK,KAAKK,QACxCT,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAeT,EAAMK,KAAKM,YACxCV,EAAAC,EAAAC,cAAA,MAAIM,UAAU,cAAcG,KAAK,UAAjC,KAA6CZ,EAAMK,KAAKQ,QACxDZ,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAeT,EAAMK,KAAKS,QACxCb,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAeT,EAAMK,KAAKU,MACxCd,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAeT,EAAMK,KAAKW,OACxCf,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAcR,EAAAC,EAAAC,cAAA,OAAKc,IAAKjB,EAAMK,KAAKa,SAAUC,MAAM,MAAMC,IAAI,UAA3E,KACAnB,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eAAcR,EAAAC,EAAAC,cAAA,KAAGkB,KAAMrB,EAAMK,KAAKiB,KAApB,IAA2BtB,EAAMK,KAAKK,QAAlE,gBCyCSa,6MAhDbC,MAAO,CACLC,QAAQC,2EAOD,IACFD,EAAWE,KAAKH,MAAhBC,QAGL,OACJxB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAACyB,EAAA,MAAD,CAAOC,YAAU,GACf5B,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,MAAf,UACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,cAAf,eACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,QAAf,UACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,SAAf,YACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,SAAf,UACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,SAAf,SACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,QAAf,SACA7B,EAAAC,EAAAC,cAAA,MAAI2B,aAAW,OAAf,oBAIF7B,EAAAC,EAAAC,cAAA,aAEEsB,EAAQM,IAAI,SAACC,EAAGC,GACf,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,CACE9B,IAAK6B,EACJ5B,KAAM2B,gBApCAG,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c0ec7e1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Rowz  = (props) =>{\n  return(\n\n    <tr key={props.moto.index}>\n\n      {console.log(props.moto)}\n      <td className=\"text-center\">{props.moto.Modelo}</td>\n      <td className=\"text-center\">{props.moto.Cilindraje}</td>\n      <td className=\"text-center\" type=\"number\">  {props.moto.Precio}</td>\n      <td className=\"text-center\">{props.moto.Frenos}</td>\n      <td className=\"text-center\">{props.moto.Peso}</td>\n      <td className=\"text-center\">{props.moto.Largo}</td>\n      <td className=\"text-center\"><img src={props.moto.Urlimage} width=\"100\" alt=\"fotos\"/> </td>\n      <td className=\"text-center\"><a href={props.moto.Url}> {props.moto.Modelo}</a> </td>\n    </tr>\n\n  );\n};\n\nexport default Rowz","import React, { Component } from 'react';\n\nimport {Table} from 'react-materialize'\nimport './App.css';\nimport Rowz from \"./Component/Rowz\";\nimport allMotos from './motos.json'\n\nclass App extends Component {\n  state ={\n    Bdmotos:allMotos\n  }\n  // componentWillMount() {\n  //   let {Bdmotos} = this.state\n  //   this.setState({Bdmotos})\n  // }\n\n  render() {\n    let {Bdmotos} = this.state;\n    // console.log('Bdmotos app',Bdmotos)\n\n    return (\n<div>\n  <h1>Cotizacion de motos</h1>\n  <Table responsive>\n    <thead>\n    <tr>\n      <th data-field=\"id\">Modelo</th>\n      <th data-field=\"Cilindraje\"> Cilindraje</th>\n      <th data-field=\"name\">Precio</th>\n      <th data-field=\"price\"> Frenos </th>\n      <th data-field=\"price\"> Peso </th>\n      <th data-field=\"Largo\">Largo</th>\n      <th data-field=\"Foto\"> Foto</th>\n      <th data-field=\"Url\"> Url PÃ¡gina</th>\n    </tr>\n    </thead>\n\n    <tbody>\n    {\n      Bdmotos.map((el,i)=>{\n       return(\n         <Rowz\n           key={i}\n            moto={el}\n         />\n       )\n      })\n    }\n    </tbody>\n  </Table>\n\n</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}